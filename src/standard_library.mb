binary_plus = $(n0: Num, n1: Num): Num => binary_plus
binary_times = $(n0: Num, n1: Num): Num => binary_times
binary_minus = $(n0: Num, n1: Num): Num => binary_minus
binary_division = $(n0: Num, n1: Num): Num => binary_division
binary_modulo = $(n0: Num, n1: Num): Num => binary_modulo
binary_exponent = $(n0: Num, n1: Num): Num => binary_exponent

binary_equal = $(v0: Any, v1: Any): Bool => binary_equal
binary_not_equal = $(v0: Any, v1: Any): Bool => binary_not_equal

binary_less_than = $(n0: Num, n1: Num): Bool => binary_less_than
binary_greater_than = $(n0: Num, n1: Num): Bool => binary_greater_than
binary_greater_than = $(n0: Num, n1: Num): Bool => binary_greater_than
binary_less_than_or_equal = $(n0: Num, n1: Num): Bool => binary_less_than_or_equal
binary_greater_than_or_equal = $(n0: Num, n1: Num): Bool => binary_greater_than_or_equal

binary_and = $(b0: Bool, b1: Bool): Bool => binary_and
binary_or = $(b0: Bool, b1: Bool): Bool => binary_or

unary_minus = $(n0: Num): Num => unary_minus
unary_reverse_complement = $(s: Str): Str => unary_reverse_complement
unary_read_reverse_complement = $(r: { seq: Str ..}): { seq: Str ..} => unary_read_reverse_complement

read_ty = $(filetype: Str): Type => read_ty

len = $(s: Str): Num => len
slice = $(s: Str, start: Num, end: Num): Str => slice

tag = $(r: { desc: Str .. }, tag: Str, prefix: Str = ' '): { desc: Str ..} => tag

translate = $(seq: Str): Str => translate

str_concat = $(s0: Str, s1: Str): Str => str_concat

concat = $(r0: { seq: Str ..}, r1: {seq: Str ..}): {seq: Str ..} => concat

csv_ty = $(filename: Str): Type => csv_ty
csv = $(filename: Str): [csv_ty(filename)] => csv

tsv_ty = $(filename: Str): Type => tsv_ty
tsv = $(filename: Str): [tsv_ty(filename)] => tsv

fasta = $(filename: Str): [{ seq: Str, id: Str, desc: Str }] => fasta

find_first = $(s0: Str, s1: Str): Num => find_first
find_last = $(s0: Str, s1: Str): Num => find_last
lookup = $(s: Str, key: Str, kv_sep: Str = '=', sep: Str = ' '): Str => lookup

to_upper = $(s: Str): Str => to_upper
to_lower = $(s: Str): Str => to_lower

describe = $(r: { seq: Str ..}, search_terms: {..}, reverse_complement: Bool = false, error_rate: Num = 0): Str => describe

contains = $(list: [Any], val: Any): Bool => contains
distance = $(s0: Str, s1: Str): Num => distance

to_str = $(val: Any): Str => to_str
to_num = $(val: Str): Num => to_num

stdout! = $(val: Any): Effect => stdout!
count! = $(val: Any, name: Str = 'count'): Effect => count!
out! = $(val: Any, filename: Str): Effect => out!
mean! = $(num: Num, name: Str = 'mean'): Effect => average!

min = $(l: [Num]): Num => min
max = $(l: [Num]): Num => max
mean = $(l: [Num]): Num => mean

to_qscores = $(s: Str): [Num] => to_qscores

paired = $(flag: Num): Bool => flag_paired
mapped_in_proper_pair = $(flag: Num): Bool => flag_mapped_in_proper_pair
unmapped = $(flag: Num): Bool => flag_unmapped
mate_unmapped = $(flag: Num): Bool => flag_mate_unmapped
reverse_strand = $(flag: Num): Bool => flag_reverse_strand
mate_reverse_strand = $(flag: Num): Bool => flag_mate_reverse_strand
first_in_pair = $(flag: Num): Bool => flag_first_in_pair
second_in_pair = $(flag: Num): Bool => flag_second_in_pair
not_primary_alignment = $(flag: Num): Bool => flag_not_primary_alignment
fails_platform_quality_checks = $(flag: Num): Bool => flag_fails_platform_quality_checks
pcr_or_optical_duplicate = $(flag: Num): Bool => flag_pcr_or_optical_duplicate
supplementary_alignment = $(flag: Num): Bool => flag_supplementary_alignment

round = $(n: Num): Num => round
